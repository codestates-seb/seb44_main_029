Index: build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\r\n\tid 'java'\r\n\tid 'org.springframework.boot' version '2.7.13'\r\n\tid 'io.spring.dependency-management' version '1.0.15.RELEASE'\r\n}\r\n\r\ngroup = 'com.example'\r\nversion = '0.0.1-SNAPSHOT'\r\n\r\njava {\r\n\tsourceCompatibility = '11'\r\n}\r\n\r\nconfigurations {\r\n\tcompileOnly {\r\n\t\textendsFrom annotationProcessor\r\n\t}\r\n}\r\n\r\nrepositories {\r\n\tmavenCentral()\r\n}\r\n\r\ndependencies {\r\n\timplementation 'org.springframework.boot:spring-boot-starter-data-jpa'\r\n\timplementation 'org.springframework.boot:spring-boot-starter-oauth2-client'\r\n\timplementation 'org.springframework.boot:spring-boot-starter-security'\r\n\timplementation 'org.springframework.boot:spring-boot-starter-web'\r\n\timplementation 'org.springframework.boot:spring-boot-starter-validation'\r\n\timplementation 'org.mapstruct:mapstruct:1.5.3.Final'\r\n\timplementation 'io.jsonwebtoken:jjwt-api:0.11.5'\r\n\timplementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'\r\n\r\n\tcompileOnly 'org.projectlombok:lombok'\r\n\r\n\r\n\truntimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'\r\n\truntimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'\r\n\truntimeOnly 'com.h2database:h2'\r\n\truntimeOnly 'com.mysql:mysql-connector-j'\r\n\r\n\tannotationProcessor 'org.projectlombok:lombok'\r\n\tannotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'\r\n\ttestImplementation 'org.springframework.boot:spring-boot-starter-test'\r\n\ttestImplementation 'org.springframework.security:spring-security-test'\r\n\r\n\timplementation 'com.amazonaws:aws-java-sdk-s3'\r\n\r\n\timplementation 'org.mapstruct:mapstruct:1.5.3.Final'\r\n\r\n\r\n\t//// transferManager\r\n\timplementation 'software.amazon.awssdk:s3:2.19.1' // 의존성 통일\r\n\r\n\t// transferManager\r\n\timplementation 'software.amazon.awssdk:s3-transfer-manager:2.19.1'\r\n\r\n\r\n\timplementation 'mysql:mysql-connector-java:8.0.32'\r\n\r\n\r\n\timplementation 'org.springdoc:springdoc-openapi-ui:1.6.12'\r\n}\r\n\r\ntasks.named('test') {\r\n\tuseJUnitPlatform()\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/build.gradle b/build.gradle
--- a/build.gradle	(revision d478b7d59828e5500e7967fc64f52d75d1dc6b70)
+++ b/build.gradle	(date 1690378124270)
@@ -60,6 +60,11 @@
 
 
 	implementation 'org.springdoc:springdoc-openapi-ui:1.6.12'
+
+	implementation group: 'net.coobird', name: 'thumbnailator', version: '0.4.14'
+	implementation 'org.jcodec:jcodec-javase:0.2.5'
+	implementation 'commons-io:commons-io:2.6'
+	implementation group: 'commons-fileupload', name: 'commons-fileupload', version: '1.4'
 }
 
 tasks.named('test') {
Index: src/main/java/com/example/server/content/controller/ContentUploadController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.server.content.controller;\r\n\r\nimport com.example.server.content.entity.Content;\r\nimport com.example.server.content.repository.ContentRepository;\r\nimport com.example.server.content.service.ContentServiceImpl;\r\nimport com.example.server.music.controller.MusicController;\r\nimport com.example.server.music.service.AwsS3Service;\r\nimport com.example.server.theme.repository.ThemeRepository;\r\nimport io.swagger.v3.oas.annotations.Operation;\r\nimport io.swagger.v3.oas.annotations.responses.ApiResponse;\r\nimport io.swagger.v3.oas.annotations.responses.ApiResponses;\r\nimport io.swagger.v3.oas.annotations.tags.Tag;\r\nimport lombok.RequiredArgsConstructor;\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.web.bind.annotation.*;\r\nimport org.springframework.web.multipart.MultipartFile;\r\n\r\n@Tag(name = \"Contents\", description = \"API about Contents\")\r\n@RestController\r\n@RequiredArgsConstructor\r\n@RequestMapping(\"/contentsUpload\")\r\n@Slf4j\r\npublic class ContentUploadController {\r\n    @Value(\"${cloud.aws.s3.bucket}\")\r\n    private String bucket;\r\n    private static final Logger logger = LoggerFactory.getLogger(MusicController.class);\r\n    private final ContentRepository contentRepository;\r\n    private final ThemeRepository themeRepository;\r\n    private final ContentServiceImpl contentService;\r\n\r\n    @Operation(summary = \"파일 업로드\",\r\n            description = \"파일을 Title과 Theme ID를 정하여 업로드합니다. \\r\\n \\r \\n\" +\r\n                    \"파일은 원본과 Thumbnail로 나뉘어서 업로드됩니다.\")\r\n\r\n    @ApiResponses(value = {\r\n            @ApiResponse(responseCode = \"200\", description = \"업로드 성공\"),\r\n            @ApiResponse(responseCode = \"500\", description = \"업로드 실패\")\r\n    })\r\n    @PostMapping\r\n    public ResponseEntity<String> uploadFile(@RequestParam(\"file\") MultipartFile file,\r\n                                             @RequestParam(\"title\") String title,\r\n                                             @RequestParam(\"themeId\") long themeId) {\r\n\r\n        return contentService.uploadSequence(file, title, themeId);\r\n    }\r\n/*\r\n    @PatchMapping\r\n    public ResponseEntity<String> thumbnailUploadFile(@RequestParam(\"file\") MultipartFile file,\r\n                                             @RequestParam(\"title\") String title,\r\n                                             @RequestParam(\"themeId\") long themeId) {\r\n\r\n        return contentService.uploadSequence(file, title, themeId);\r\n    }\r\n */\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/server/content/controller/ContentUploadController.java b/src/main/java/com/example/server/content/controller/ContentUploadController.java
--- a/src/main/java/com/example/server/content/controller/ContentUploadController.java	(revision d478b7d59828e5500e7967fc64f52d75d1dc6b70)
+++ b/src/main/java/com/example/server/content/controller/ContentUploadController.java	(date 1690378124281)
@@ -20,6 +20,8 @@
 import org.springframework.web.bind.annotation.*;
 import org.springframework.web.multipart.MultipartFile;
 
+import javax.transaction.Transactional;
+
 @Tag(name = "Contents", description = "API about Contents")
 @RestController
 @RequiredArgsConstructor
@@ -34,13 +36,14 @@
     private final ContentServiceImpl contentService;
 
     @Operation(summary = "파일 업로드",
-            description = "파일을 Title과 Theme ID를 정하여 업로드합니다. \r\n \r \n" +
+            description = "파일을 Title과 Theme ID를 정하여 업로드합니다." +
                     "파일은 원본과 Thumbnail로 나뉘어서 업로드됩니다.")
 
     @ApiResponses(value = {
             @ApiResponse(responseCode = "200", description = "업로드 성공"),
             @ApiResponse(responseCode = "500", description = "업로드 실패")
     })
+    @Transactional
     @PostMapping
     public ResponseEntity<String> uploadFile(@RequestParam("file") MultipartFile file,
                                              @RequestParam("title") String title,
Index: src/main/java/com/example/server/member/service/MemberService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.server.member.service;\r\n\r\nimport com.example.server.member.Mapper.MemberMapper;\r\nimport com.example.server.member.dto.*;\r\nimport com.example.server.member.entity.BlackList;\r\nimport com.example.server.member.entity.Member;\r\nimport com.example.server.member.entity.MemberRecord;\r\nimport com.example.server.member.entity.RefreshToken;\r\nimport com.example.server.member.repository.BlackListJpaRepository;\r\nimport com.example.server.member.repository.MemberJpaRepository;\r\nimport com.example.server.member.repository.MemberRecordJpaRepository;\r\nimport com.example.server.member.repository.RefreshTokenJpaRepository;\r\nimport com.example.server.member.security.token.JwtTokenProvider;\r\nimport lombok.RequiredArgsConstructor;\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\r\nimport org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;\r\nimport org.springframework.security.core.Authentication;\r\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\r\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.util.List;\r\nimport java.util.stream.Collectors;\r\n\r\n\r\n@Slf4j\r\n@Service\r\n@RequiredArgsConstructor\r\npublic class MemberService{\r\n    @Value(\"${jwt.refresh_token_expired}\")\r\n    long refreshTokenExpired;\r\n    private final AuthenticationManagerBuilder authenticationManagerBuilder;\r\n    private final JwtTokenProvider tokenProvider;\r\n    private final TokenService tokenService;\r\n    private final MemberJpaRepository memberJpaRepository;\r\n    private final MemberRecordJpaRepository memberRecordJpaRepository;\r\n    private final MemberMapper memberMapper;\r\n    private final RefreshTokenJpaRepository refreshTokenJpaRepository;\r\n    private final BlackListJpaRepository blackListJpaRepository;\r\n    private final BCryptPasswordEncoder passwordEncoder;\r\n\r\n    public MemberIdAndTokenDto login(MemberLoginDto dto){\r\n        UsernamePasswordAuthenticationToken authenticationToken = new UsernamePasswordAuthenticationToken(dto.getEmail(), dto.getPassword());\r\n        Authentication authentication = authenticationManagerBuilder.getObject().authenticate(authenticationToken);\r\n\r\n        String username = authentication.getName();\r\n\r\n        Member member = memberJpaRepository.findByMemberUsername(username)\r\n                .orElseThrow(() -> new UsernameNotFoundException(\"존재하지 않는 사용자입니다.\"));\r\n\r\n        if(invaildMember(member)){\r\n            log.info(\"회원탈퇴 된 사용자입니다.\");\r\n            return null;\r\n        }\r\n\r\n        boolean isGuest = true;\r\n        if(!member.getUsername().equals(\"guest\")) {\r\n            isGuest = false;\r\n\r\n            List<RefreshToken> checkList = refreshTokenJpaRepository.findByMemberId(member.getId());\r\n            RefreshToken check = (checkList.isEmpty()) ? null : checkList.get(0);\r\n\r\n            if (check != null && check.getActive()) {\r\n                log.info(\"이미 로그인 한 사용자입니다.\");\r\n\r\n                RefreshToken refreshToken = refreshTokenJpaRepository.findByMemberId(member.getId()).get(0);\r\n                refreshToken.setActive(false);\r\n                refreshTokenJpaRepository.save(refreshToken);\r\n                log.info(\"중복 로그인으로 인하여 로그인한 사용자를 로그아웃 하였습니다.\");\r\n\r\n                return MemberIdAndTokenDto.builder()\r\n                        .memberId(-6L).build();\r\n            }\r\n        }\r\n\r\n        String refreshToken = tokenService.createRefreshToken(username, isGuest);\r\n        String accessToken = tokenProvider.createToken(authentication);\r\n\r\n        MemberIdAndTokenDto response = MemberIdAndTokenDto.builder()\r\n                .refreshToken(refreshToken)\r\n                .accessToken(accessToken)\r\n                .memberId(((Member) authentication.getPrincipal()).getId())\r\n                .build();\r\n\r\n        return response;\r\n    }\r\n\r\n    public Boolean logout(MemberIdAndTokenDto dto){\r\n        Member member = memberJpaRepository.findById(dto.getMemberId())\r\n                .orElseThrow(() -> new UsernameNotFoundException(\"존재하지 않는 사용자입니다.\"));\r\n\r\n        if(invaildMember(member)){\r\n            log.info(\"회원탈퇴 된 사용자입니다.\");\r\n            return null;\r\n        }\r\n\r\n        List<RefreshToken> refreshTokens = refreshTokenJpaRepository.findByMemberId(dto.getMemberId());\r\n\r\n        RefreshToken refreshToken = refreshTokens.stream()\r\n                .filter(token -> token.getToken().equals(dto.getRefreshToken()))\r\n                .findFirst()\r\n                .orElse(null);\r\n\r\n        if(refreshToken != null){\r\n            refreshToken.setActive(false);\r\n\r\n            BlackList blackList = BlackList.builder()\r\n                    .accessToken(dto.getAccessToken())\r\n                    .build();\r\n\r\n            refreshTokenJpaRepository.save(refreshToken);\r\n            blackListJpaRepository.save(blackList);\r\n        }else{\r\n            throw new RuntimeException(\"Refresh Token is not exist\");\r\n        }\r\n\r\n        log.info(\"로그아웃 완료\");\r\n        return true;\r\n    }\r\n\r\n    public Long signUp(MemberSignUpDto dto){\r\n        Member isEmailPresent = memberJpaRepository.findByMemberEmail(dto.getEmail()).orElse(null);\r\n        Member isUsernamePresent = memberJpaRepository.findByMemberUsername(dto.getUsername()).orElse(null);\r\n\r\n        if((isEmailPresent != null && isEmailPresent.getActive()) && (isEmailPresent != null && isUsernamePresent.getActive())){\r\n            log.info(\"Email, Username 중복\");\r\n            return -3L;\r\n        }\r\n        else if(isEmailPresent != null && isEmailPresent.getActive()){\r\n            log.info(\"Email 중복\");\r\n            return -2L;\r\n        }else if(isEmailPresent != null && isUsernamePresent.getActive()){\r\n            log.info(\"Username 중복\");\r\n            return -1L;\r\n        }\r\n\r\n        String password = passwordEncoder.encode(dto.getPassword());\r\n\r\n        Member member = Member.builder()\r\n                .active(true)\r\n                .email(dto.getEmail())\r\n                .username(dto.getUsername())\r\n                .password(password)\r\n                .imageUrl(null)\r\n                .role(Member.Role.USER)\r\n                .build();\r\n\r\n        Long memberId = memberJpaRepository.save(member).getId();\r\n\r\n        log.info(\"회원가입 성공\");\r\n        return memberId;\r\n    }\r\n\r\n    public MemberResponseDto read(Long memberId){\r\n        Member member =  memberJpaRepository.findById(memberId)\r\n                .orElseThrow( () -> new UsernameNotFoundException(\"존재하지 않은 유저입니다.\"));\r\n\r\n        if(invaildMember(member)){\r\n            log.info(\"회원탈퇴 된 사용자입니다.\");\r\n            return null;\r\n        }\r\n\r\n        log.info(\"회원조회 성공\");\r\n        return memberMapper.memberToMemberResponseDto(member);\r\n    }\r\n\r\n    public Long update(MemberUpdateDto dto, Long memberId){\r\n        Member isPresentMember = memberJpaRepository.findByMemberUsername(dto.getUsername()).orElse(null);\r\n\r\n        if(isPresentMember != null && isPresentMember.getActive()){\r\n            log.info(\"Username 중복\");\r\n            return -2L;\r\n        }\r\n\r\n        Member member = memberJpaRepository.findById(memberId)\r\n                .orElseThrow( () -> new UsernameNotFoundException(\"존재하지 않은 유저입니다.\"));\r\n\r\n        if(invaildMember(member)){\r\n            log.info(\"회원탈퇴 된 사용자입니다.\");\r\n            return null;\r\n        }\r\n\r\n\r\n        MemberRecord record = recordMember(member);\r\n\r\n        if(dto.getUsername() != null)\r\n            member.setUsername(dto.getUsername());\r\n        if(dto.getImageUrl() != null)\r\n            member.setImageUrl(dto.getImageUrl());\r\n\r\n        memberRecordJpaRepository.save(record);\r\n        memberJpaRepository.save(member);\r\n\r\n        log.info(\"회원정보 수정 성공\");\r\n        return memberId;\r\n    }\r\n\r\n    public Long updatePassword(Long memberId, MemberPasswordUpdateDto dto){\r\n        Member member = memberJpaRepository.findById(memberId).\r\n                orElseThrow(() -> new UsernameNotFoundException(\"User Not Found\"));\r\n\r\n        if(invaildMember(member)){\r\n            log.info(\"회원탈퇴 된 사용자입니다.\");\r\n            return null;\r\n        }\r\n\r\n        String password = member.getPassword();\r\n        String oldPassword = dto.getOldPassword();\r\n\r\n        if(!passwordEncoder.matches(oldPassword, password)){\r\n            return -4L;\r\n        }\r\n\r\n        return memberJpaRepository.save(member).getId();\r\n    }\r\n\r\n    public Long delete(Long memberId) {\r\n        Member member = memberJpaRepository.findById(memberId)\r\n                .orElseThrow(() -> new UsernameNotFoundException(\"User Not Found\"));\r\n\r\n        if(member.getUsername().equals(\"guest\") || member.getUsername().equals(\"admin\")){\r\n            log.info(\"해당 계정은 삭제할 수 없습니다.\");\r\n            return -5L;\r\n        }\r\n\r\n        if(invaildMember(member)){\r\n            log.info(\"회원탈퇴 된 사용자입니다.\");\r\n            return null;\r\n        }\r\n\r\n        member.setActive(false);\r\n\r\n        MemberRecord record = recordMember(member);\r\n\r\n        memberRecordJpaRepository.save(record);\r\n        memberJpaRepository.save(member);\r\n\r\n        return memberId;\r\n    }\r\n\r\n    public MemberRecord recordMember(Member member){\r\n        return MemberRecord.builder()\r\n                .active(member.getActive())\r\n                .username(member.getUsername())\r\n                .email(member.getEmail())\r\n                .imageUrl(member.getImageUrl())\r\n                .role(member.getRole())\r\n                .createAt(member.getModifiedAt())\r\n                .member(member)\r\n                .build();\r\n    }\r\n\r\n    public boolean invaildMember(Member member){\r\n        return !member.getActive();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/server/member/service/MemberService.java b/src/main/java/com/example/server/member/service/MemberService.java
--- a/src/main/java/com/example/server/member/service/MemberService.java	(revision d478b7d59828e5500e7967fc64f52d75d1dc6b70)
+++ b/src/main/java/com/example/server/member/service/MemberService.java	(date 1690378595782)
@@ -124,14 +124,14 @@
         Member isEmailPresent = memberJpaRepository.findByMemberEmail(dto.getEmail()).orElse(null);
         Member isUsernamePresent = memberJpaRepository.findByMemberUsername(dto.getUsername()).orElse(null);
 
-        if((isEmailPresent != null && isEmailPresent.getActive()) && (isEmailPresent != null && isUsernamePresent.getActive())){
+        if((isEmailPresent != null && isEmailPresent.getActive()) && (isUsernamePresent != null && isUsernamePresent.getActive())){
             log.info("Email, Username 중복");
             return -3L;
         }
         else if(isEmailPresent != null && isEmailPresent.getActive()){
             log.info("Email 중복");
             return -2L;
-        }else if(isEmailPresent != null && isUsernamePresent.getActive()){
+        }else if(isUsernamePresent != null && isUsernamePresent.getActive()){
             log.info("Username 중복");
             return -1L;
         }
@@ -255,4 +255,4 @@
     public boolean invaildMember(Member member){
         return !member.getActive();
     }
-}
\ No newline at end of file
+}
Index: src/main/resources/application.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>cloud:\r\n  aws:\r\n    credentials:\r\n      accessKey: ${AWS_ACCESS_KEY}\r\n      secretKey: ${AWS_SECRET_KEY}\r\n    s3:\r\n      bucket: cozystates.com\r\n    region:\r\n      static: ap-northeast-2\r\n    stack:\r\n      auto: 'false'\r\nspring:\r\n  datasource:\r\n    url: jdbc:mysql://database-cozystates2.c1hypxzbotyv.ap-northeast-2.rds.amazonaws.com:13306/cozystates?useSSL=false&characterEncoding=UTF-8&serverTimezone=UTC\r\n    username: admin\r\n    password: 12341234\r\n    driver-class-name: com.mysql.cj.jdbc.Driver\r\n  jpa:\r\n    database-platform: org.hibernate.dialect.MySQL8Dialect\r\n    hibernate:\r\n      ddl-auto: update\r\n    show-sql: true\r\n    properties:\r\n      hibernate:\r\n        format_sql: true  # (3) SQL pretty print\r\n  servlet:\r\n    multipart:\r\n      max-file-size: 10MB\r\n      max-request-size: 10MB\r\n    sql:\r\n      init:\r\n        data-locations: classpath*:db/h2/data.sql\r\n  logging:\r\n    level:\r\n      org:\r\n        springframework:\r\n          orm:\r\n            jpa: DEBUG\r\n  security:\r\n    oauth2:\r\n      client:\r\n        registration:\r\n          google:\r\n            client-id: ${CLIENT_ID}\r\n            client-secret: ${CLIENT_SECRET}\r\n            scope:\r\n              - profile\r\n              - email\r\nconfig:\r\n  domain: http://cozystates.com.s3-website.ap-northeast-2.amazonaws.com\r\n\r\njwt:\r\n  secret: ${JWT_SECRET}\r\n  access_token_expired: 3_600_000\r\n  refresh_token_expired: 604_800_000\r\n\r\nspringdoc:\r\n  packages-to-scan: com.example.server\r\n  default-consumes-media-type: application/json;charset=UTF-8\r\n  default-produces-media-type: application/json;charset=UTF-8\r\n  swagger-ui:\r\n    path: /api_doc.html            # Swagger UI 경로 => localhost:8000/demo-ui.html\r\n    tags-sorter: alpha            # alpha: 알파벳 순 태그 정렬, method: HTTP Method 순 정렬\r\n    operations-sorter: alpha      # alpha: 알파벳 순 태그 정렬, method: HTTP Method 순 정렬\r\n  api-docs:\r\n    path: /api-docs/json\r\n    groups:\r\n      enabled: true\r\n  cache:\r\n    disabled: true\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/application.yml b/src/main/resources/application.yml
--- a/src/main/resources/application.yml	(revision d478b7d59828e5500e7967fc64f52d75d1dc6b70)
+++ b/src/main/resources/application.yml	(date 1690378314978)
@@ -11,9 +11,9 @@
       auto: 'false'
 spring:
   datasource:
-    url: jdbc:mysql://database-cozystates2.c1hypxzbotyv.ap-northeast-2.rds.amazonaws.com:13306/cozystates?useSSL=false&characterEncoding=UTF-8&serverTimezone=UTC
-    username: admin
-    password: 12341234
+    url: jdbc:mysql://localhost:3306/tmpdb?useSSL=false&characterEncoding=UTF-8&serverTimezone=UTC
+    username: root
+    password: 1234
     driver-class-name: com.mysql.cj.jdbc.Driver
   jpa:
     database-platform: org.hibernate.dialect.MySQL8Dialect
Index: src/main/java/com/example/server/theme/controller/ThemeController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.server.theme.controller;\r\n\r\nimport com.example.server.content.mapper.ContentMapper;\r\nimport com.example.server.content.service.ContentServiceImpl;\r\nimport com.example.server.theme.mapper.ThemeMapper;\r\nimport com.example.server.theme.service.ThemeServiceImpl;\r\nimport io.swagger.v3.oas.annotations.Operation;\r\nimport io.swagger.v3.oas.annotations.responses.ApiResponse;\r\nimport io.swagger.v3.oas.annotations.responses.ApiResponses;\r\nimport io.swagger.v3.oas.annotations.tags.Tag;\r\nimport lombok.RequiredArgsConstructor;\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.validation.annotation.Validated;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.validation.Valid;\r\nimport javax.validation.constraints.Positive;\r\n\r\n@Tag(name = \"Contents\", description = \"API about Contents\")\r\n@RestController\r\n@RequiredArgsConstructor\r\n@RequestMapping(\"/theme\")\r\n@Validated\r\n@Slf4j\r\npublic class ThemeController {\r\n    public final ThemeMapper themeMapper;\r\n    public final ThemeServiceImpl themeService;\r\n    public final ContentServiceImpl contentService;\r\n    public final ContentMapper contentMapper;\r\n\r\n    @Operation(summary = \"Theme 이미지 리스트\",\r\n            description = \"Theme ID를 받아서 해당 Theme의 Contents를 리스트의 형태로 Page 정보와 함께 반환합니다. \\r \\n \\r\\n\" +\r\n                    \"로그인이 되어 있지 않은 경우 모든 좋아요 정보는 false로 반환됩니다. \\r \\n \\r\\n\" +\r\n                    \"해당 리스트의 Content 정보에서 제공하는 URI는 thumbnail의 URI입니다.\")\r\n\r\n    @ApiResponses(value = {\r\n            @ApiResponse(responseCode = \"200\", description = \"응답 성공\"),\r\n            @ApiResponse(responseCode = \"403\", description = \"토큰 불일치 혹은 만료\")\r\n    })\r\n    @GetMapping(\"/{theme_id}\")\r\n    public ResponseEntity<?> getContentByTheme(\r\n            @Valid @PathVariable(\"theme_id\") Long themeId,\r\n            HttpServletRequest request,\r\n            @Positive @RequestParam(required = false, defaultValue = \"1\", value = \"page\") int page,\r\n            @Positive @RequestParam(required = false, defaultValue = \"8\", value = \"size\") int size,\r\n            @RequestParam(required = false, defaultValue = \"contentId\", value = \"criteria\") String criteria,\r\n            @RequestParam(required = false, defaultValue = \"DESC\", value = \"sort\") String sort){\r\n\r\n        return themeService.themeResponse(themeId, request, page, size, criteria, sort);\r\n    }\r\n/*\r\n    @GetMapping\r\n    public ResponseEntity<?> getThemes(){\r\n\r\n        return new ResponseEntity<>(themeMapper.ThemesToThemeResponseDtos(themeService.getThemes()), HttpStatus.OK);\r\n    }\r\n */\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/server/theme/controller/ThemeController.java b/src/main/java/com/example/server/theme/controller/ThemeController.java
--- a/src/main/java/com/example/server/theme/controller/ThemeController.java	(revision d478b7d59828e5500e7967fc64f52d75d1dc6b70)
+++ b/src/main/java/com/example/server/theme/controller/ThemeController.java	(date 1690378124285)
@@ -32,8 +32,8 @@
     public final ContentMapper contentMapper;
 
     @Operation(summary = "Theme 이미지 리스트",
-            description = "Theme ID를 받아서 해당 Theme의 Contents를 리스트의 형태로 Page 정보와 함께 반환합니다. \r \n \r\n" +
-                    "로그인이 되어 있지 않은 경우 모든 좋아요 정보는 false로 반환됩니다. \r \n \r\n" +
+            description = "Theme ID를 받아서 해당 Theme의 Contents를 리스트의 형태로 Page 정보와 함께 반환합니다." +
+                    "로그인이 되어 있지 않은 경우 모든 좋아요 정보는 false로 반환됩니다." +
                     "해당 리스트의 Content 정보에서 제공하는 URI는 thumbnail의 URI입니다.")
 
     @ApiResponses(value = {
Index: build/resources/main/application.yml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>cloud:\r\n  aws:\r\n    credentials:\r\n      accessKey: ${AWS_ACCESS_KEY}\r\n      secretKey: ${AWS_SECRET_KEY}\r\n    s3:\r\n      bucket: cozystates.com\r\n    region:\r\n      static: ap-northeast-2\r\n    stack:\r\n      auto: 'false'\r\nspring:\r\n  datasource:\r\n    url: jdbc:mysql://database-cozystates2.c1hypxzbotyv.ap-northeast-2.rds.amazonaws.com:13306/cozystates?useSSL=false&characterEncoding=UTF-8&serverTimezone=UTC\r\n    username: admin\r\n    password: 12341234\r\n    driver-class-name: com.mysql.cj.jdbc.Driver\r\n  jpa:\r\n    database-platform: org.hibernate.dialect.MySQL8Dialect\r\n    hibernate:\r\n      ddl-auto: update\r\n    show-sql: true\r\n    properties:\r\n      hibernate:\r\n        format_sql: true  # (3) SQL pretty print\r\n  servlet:\r\n    multipart:\r\n      max-file-size: 10MB\r\n      max-request-size: 10MB\r\n    sql:\r\n      init:\r\n        data-locations: classpath*:db/h2/data.sql\r\n  logging:\r\n    level:\r\n      org:\r\n        springframework:\r\n          orm:\r\n            jpa: DEBUG\r\n  security:\r\n    oauth2:\r\n      client:\r\n        registration:\r\n          google:\r\n            client-id: ${CLIENT_ID}\r\n            client-secret: ${CLIENT_SECRET}\r\n            scope:\r\n              - profile\r\n              - email\r\nconfig:\r\n  domain: http://cozystates.com.s3-website.ap-northeast-2.amazonaws.com\r\n\r\njwt:\r\n  secret: ${JWT_SECRET}\r\n  access_token_expired: 3_600_000\r\n  refresh_token_expired: 604_800_000\r\n\r\nspringdoc:\r\n  packages-to-scan: com.example.server\r\n  default-consumes-media-type: application/json;charset=UTF-8\r\n  default-produces-media-type: application/json;charset=UTF-8\r\n  swagger-ui:\r\n    path: /api_doc.html            # Swagger UI 경로 => localhost:8000/demo-ui.html\r\n    tags-sorter: alpha            # alpha: 알파벳 순 태그 정렬, method: HTTP Method 순 정렬\r\n    operations-sorter: alpha      # alpha: 알파벳 순 태그 정렬, method: HTTP Method 순 정렬\r\n  api-docs:\r\n    path: /api-docs/json\r\n    groups:\r\n      enabled: true\r\n  cache:\r\n    disabled: true\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/build/resources/main/application.yml b/build/resources/main/application.yml
--- a/build/resources/main/application.yml	(revision d478b7d59828e5500e7967fc64f52d75d1dc6b70)
+++ b/build/resources/main/application.yml	(date 1690378316278)
@@ -11,9 +11,9 @@
       auto: 'false'
 spring:
   datasource:
-    url: jdbc:mysql://database-cozystates2.c1hypxzbotyv.ap-northeast-2.rds.amazonaws.com:13306/cozystates?useSSL=false&characterEncoding=UTF-8&serverTimezone=UTC
-    username: admin
-    password: 12341234
+    url: jdbc:mysql://localhost:3306/tmpdb?useSSL=false&characterEncoding=UTF-8&serverTimezone=UTC
+    username: root
+    password: 1234
     driver-class-name: com.mysql.cj.jdbc.Driver
   jpa:
     database-platform: org.hibernate.dialect.MySQL8Dialect
Index: src/main/java/com/example/server/likes/controller/LikeController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.server.likes.controller;\r\n\r\nimport com.example.server.content.service.ContentServiceImpl;\r\nimport com.example.server.likes.service.LikesServiceImpl;\r\nimport com.example.server.member.service.MemberService;\r\nimport io.swagger.v3.oas.annotations.Operation;\r\nimport io.swagger.v3.oas.annotations.responses.ApiResponse;\r\nimport io.swagger.v3.oas.annotations.responses.ApiResponses;\r\nimport io.swagger.v3.oas.annotations.tags.Tag;\r\nimport lombok.RequiredArgsConstructor;\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.validation.annotation.Validated;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.validation.constraints.Positive;\r\n\r\n@RestController\r\n@RequiredArgsConstructor\r\n@RequestMapping(\"/likes\")\r\n@Validated\r\n@Slf4j\r\n@Tag(name = \"Like\", description = \"API about Like\")\r\npublic class LikeController {\r\n    public final LikesServiceImpl likesService;\r\n    public final ContentServiceImpl contentService;\r\n    public final MemberService memberService;\r\n\r\n    @Operation(summary = \"Like/Unlike 요청\",\r\n            description = \"사용자가 특정 Content에 대해서 좋아요를 등록 또는 해제합니다.\")\r\n    @ApiResponses(value = {\r\n            @ApiResponse(responseCode = \"200\", description = \"좋아요 등록/해제 성공\"),\r\n            @ApiResponse(responseCode = \"403\", description = \"토큰 불일치 혹은 만료\")\r\n    })\r\n    @PatchMapping(\"/{content-id}\")\r\n    synchronized public ResponseEntity<?> patchlike(@Positive @PathVariable(\"content-id\") Long contentId,\r\n                                       HttpServletRequest request){\r\n\r\n        return likesService.patchLike(contentId, request);\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/server/likes/controller/LikeController.java b/src/main/java/com/example/server/likes/controller/LikeController.java
--- a/src/main/java/com/example/server/likes/controller/LikeController.java	(revision d478b7d59828e5500e7967fc64f52d75d1dc6b70)
+++ b/src/main/java/com/example/server/likes/controller/LikeController.java	(date 1690378124283)
@@ -11,6 +11,7 @@
 import lombok.extern.slf4j.Slf4j;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.ResponseEntity;
+import org.springframework.transaction.annotation.Transactional;
 import org.springframework.validation.annotation.Validated;
 import org.springframework.web.bind.annotation.*;
 
@@ -34,8 +35,9 @@
             @ApiResponse(responseCode = "200", description = "좋아요 등록/해제 성공"),
             @ApiResponse(responseCode = "403", description = "토큰 불일치 혹은 만료")
     })
+    @Transactional
     @PatchMapping("/{content-id}")
-    synchronized public ResponseEntity<?> patchlike(@Positive @PathVariable("content-id") Long contentId,
+    public ResponseEntity<?> patchlike(@Positive @PathVariable("content-id") Long contentId,
                                        HttpServletRequest request){
 
         return likesService.patchLike(contentId, request);
Index: src/main/java/com/example/server/likes/repository/LikeRepository.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.server.likes.repository;\r\n\r\nimport com.example.server.content.entity.Content;\r\nimport com.example.server.likes.entity.Likes;\r\nimport com.example.server.member.entity.Member;\r\nimport org.springframework.data.jpa.repository.JpaRepository;\r\nimport org.springframework.stereotype.Repository;\r\n\r\nimport java.util.Optional;\r\n\r\n@Repository\r\npublic interface LikeRepository extends JpaRepository<Likes, Long> {\r\n    Optional<Likes> findByMemberAndContent(Member member, Content content);\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/server/likes/repository/LikeRepository.java b/src/main/java/com/example/server/likes/repository/LikeRepository.java
--- a/src/main/java/com/example/server/likes/repository/LikeRepository.java	(revision d478b7d59828e5500e7967fc64f52d75d1dc6b70)
+++ b/src/main/java/com/example/server/likes/repository/LikeRepository.java	(date 1690378124283)
@@ -4,11 +4,15 @@
 import com.example.server.likes.entity.Likes;
 import com.example.server.member.entity.Member;
 import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Lock;
 import org.springframework.stereotype.Repository;
 
+import javax.persistence.LockModeType;
 import java.util.Optional;
 
 @Repository
 public interface LikeRepository extends JpaRepository<Likes, Long> {
+
+    @Lock(LockModeType.PESSIMISTIC_WRITE)
     Optional<Likes> findByMemberAndContent(Member member, Content content);
 }
Index: build/generated/sources/annotationProcessor/java/main/com/example/server/member/mapper/MemberMapperImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.server.member.Mapper;\r\n\r\nimport com.example.server.member.dto.MemberResponseDto;\r\nimport com.example.server.member.entity.Member;\r\nimport javax.annotation.processing.Generated;\r\nimport org.springframework.stereotype.Component;\r\n\r\n@Generated(\r\n    value = \"org.mapstruct.ap.MappingProcessor\",\r\n    date = \"2023-07-24T11:22:08+0900\",\r\n    comments = \"version: 1.5.3.Final, compiler: IncrementalProcessingEnvironment from gradle-language-java-8.1.1.jar, environment: Java 11.0.18 (Amazon.com Inc.)\"\r\n)\r\n@Component\r\npublic class MemberMapperImpl implements MemberMapper {\r\n\r\n    @Override\r\n    public MemberResponseDto memberToMemberResponseDto(Member member) {\r\n        if ( member == null ) {\r\n            return null;\r\n        }\r\n\r\n        MemberResponseDto.MemberResponseDtoBuilder memberResponseDto = MemberResponseDto.builder();\r\n\r\n        memberResponseDto.username( member.getUsername() );\r\n        memberResponseDto.email( member.getEmail() );\r\n        memberResponseDto.imageUrl( member.getImageUrl() );\r\n\r\n        return memberResponseDto.build();\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/build/generated/sources/annotationProcessor/java/main/com/example/server/member/mapper/MemberMapperImpl.java b/build/generated/sources/annotationProcessor/java/main/com/example/server/member/mapper/MemberMapperImpl.java
--- a/build/generated/sources/annotationProcessor/java/main/com/example/server/member/mapper/MemberMapperImpl.java	(revision d478b7d59828e5500e7967fc64f52d75d1dc6b70)
+++ b/build/generated/sources/annotationProcessor/java/main/com/example/server/member/mapper/MemberMapperImpl.java	(date 1690378233602)
@@ -7,7 +7,7 @@
 
 @Generated(
     value = "org.mapstruct.ap.MappingProcessor",
-    date = "2023-07-24T11:22:08+0900",
+    date = "2023-07-26T22:30:33+0900",
     comments = "version: 1.5.3.Final, compiler: IncrementalProcessingEnvironment from gradle-language-java-8.1.1.jar, environment: Java 11.0.18 (Amazon.com Inc.)"
 )
 @Component
Index: build/generated/sources/annotationProcessor/java/main/com/example/server/content/mapper/ContentMapperImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.server.content.mapper;\r\n\r\nimport javax.annotation.processing.Generated;\r\nimport org.springframework.stereotype.Component;\r\n\r\n@Generated(\r\n    value = \"org.mapstruct.ap.MappingProcessor\",\r\n    date = \"2023-07-24T11:22:08+0900\",\r\n    comments = \"version: 1.5.3.Final, compiler: IncrementalProcessingEnvironment from gradle-language-java-8.1.1.jar, environment: Java 11.0.18 (Amazon.com Inc.)\"\r\n)\r\n@Component\r\npublic class ContentMapperImpl implements ContentMapper {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/build/generated/sources/annotationProcessor/java/main/com/example/server/content/mapper/ContentMapperImpl.java b/build/generated/sources/annotationProcessor/java/main/com/example/server/content/mapper/ContentMapperImpl.java
--- a/build/generated/sources/annotationProcessor/java/main/com/example/server/content/mapper/ContentMapperImpl.java	(revision d478b7d59828e5500e7967fc64f52d75d1dc6b70)
+++ b/build/generated/sources/annotationProcessor/java/main/com/example/server/content/mapper/ContentMapperImpl.java	(date 1690378233626)
@@ -5,7 +5,7 @@
 
 @Generated(
     value = "org.mapstruct.ap.MappingProcessor",
-    date = "2023-07-24T11:22:08+0900",
+    date = "2023-07-26T22:30:33+0900",
     comments = "version: 1.5.3.Final, compiler: IncrementalProcessingEnvironment from gradle-language-java-8.1.1.jar, environment: Java 11.0.18 (Amazon.com Inc.)"
 )
 @Component
Index: src/main/java/com/example/server/content/service/ContentServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.server.content.service;\r\n\r\nimport com.example.server.content.controller.ContentController;\r\nimport com.example.server.content.dto.ContentListDto;\r\nimport com.example.server.content.dto.ContentPageDto;\r\nimport com.example.server.content.dto.ContentResponseDto;\r\nimport com.example.server.content.entity.Content;\r\nimport com.example.server.content.mapper.ContentMapper;\r\nimport com.example.server.content.repository.ContentRepository;\r\nimport com.example.server.likes.entity.Likes;\r\nimport com.example.server.likes.repository.LikeRepository;\r\nimport com.example.server.member.entity.Member;\r\nimport com.example.server.member.repository.MemberJpaRepository;\r\nimport com.example.server.theme.entity.Theme;\r\nimport com.example.server.theme.repository.ThemeRepository;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\nimport org.springframework.beans.factory.annotation.Value;\r\nimport org.springframework.data.domain.*;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.stereotype.Service;\r\nimport org.springframework.web.multipart.MultipartFile;\r\nimport software.amazon.awssdk.core.exception.SdkException;\r\nimport software.amazon.awssdk.core.sync.RequestBody;\r\nimport software.amazon.awssdk.services.s3.S3Client;\r\nimport software.amazon.awssdk.services.s3.model.*;\r\nimport software.amazon.awssdk.services.s3.presigner.S3Presigner;\r\nimport software.amazon.awssdk.services.s3.presigner.model.GetObjectPresignRequest;\r\nimport software.amazon.awssdk.services.s3.presigner.model.PresignedGetObjectRequest;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.transaction.Transactional;\r\nimport java.io.IOException;\r\nimport java.time.Duration;\r\nimport java.util.ArrayList;\r\nimport java.util.Collections;\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.stream.Collectors;\r\n\r\n@Transactional\r\n@RequiredArgsConstructor\r\n@Service\r\npublic class ContentServiceImpl implements ContentService {\r\n    private final ThemeRepository themeRepository;\r\n    private final ContentRepository contentRepository;\r\n    private final MemberJpaRepository memberJpaRepository;\r\n    private final LikeRepository likeRepository;\r\n    private final ContentMapper contentMapper;\r\n    private final S3Client s3Client;\r\n    private final S3Presigner s3Presigner;\r\n    //private static final Logger logger = (Logger) LoggerFactory.getLogger(ContentController.class);\r\n\r\n    @Value(\"${cloud.aws.s3.bucket}\")\r\n    private String bucketName;\r\n\r\n    @Override\r\n    public List<Content> getContentByTheme(Long themeId) {\r\n        Theme theme = themeRepository.findById(themeId)\r\n                .orElseThrow(() -> new IllegalArgumentException(\"THEME doesn't exist\"));\r\n\r\n        return contentRepository.findByTheme(theme);\r\n    }\r\n\r\n    @Override\r\n    public Page<Content> contentPagination(List<Content> contents, int page, int size, String criteria, String sort) {\r\n        Pageable pageRequest = (sort.equals(\"ASC\")) ?\r\n                PageRequest.of(page, size, Sort.by(Sort.Direction.ASC, criteria))\r\n                : PageRequest.of(page, size, Sort.by(Sort.Direction.DESC, criteria));\r\n\r\n        int start = (int) pageRequest.getOffset();\r\n        int end = Math.min((start + pageRequest.getPageSize()), contents.size());\r\n\r\n        List<Content> pageContent = contents.subList(start, end);\r\n        return new PageImpl<>(pageContent, pageRequest, contents.size());\r\n    }\r\n\r\n    @Override\r\n    public ContentListDto contentResponse(Long contentId, HttpServletRequest request){\r\n        Content content = contentRepository.findById(contentId).orElseThrow();\r\n        Long themeId = content.getTheme().getThemeId();\r\n\r\n        ContentResponseDto contentResponseDto = contentMapper.ContentToContentResponseDto(content);\r\n\r\n        Long memberId = (Long) request.getAttribute(\"memberId\");\r\n        if (memberId == null){\r\n            contentResponseDto.setLiked(false);\r\n        } else {\r\n            contentResponseDto.setLiked(likeRepository.findByMemberAndContent(memberJpaRepository.findById(memberId).orElseThrow(), content).isPresent());\r\n        }\r\n\r\n        contentResponseDto.setContentUri(getContentFileUrl(contentId));\r\n\r\n        List<Long> contentIdList = contentRepository.findByTheme(themeRepository.findById(themeId).orElseThrow()).stream()\r\n                .map(Content::getContentId)\r\n                .collect(Collectors.toList());\r\n\r\n        return new ContentListDto(contentResponseDto, contentIdList);\r\n    }\r\n\r\n    @Override\r\n    public List<ContentResponseDto> contentsResponse(Page<Content> contents, Long memberId){\r\n        if (memberId == null) {\r\n            return contents.getContent().stream()\r\n                    .map(Content -> {\r\n                        ContentResponseDto contentResponseDto = contentMapper.ContentToContentResponseDto(Content);\r\n                        contentResponseDto.setLiked(false);\r\n                        //contentResponseDto.setContentUri(getContentFileUrl(Content.getContentId()));\r\n                        return contentResponseDto;\r\n                    }).collect(Collectors.toList());\r\n        } else {\r\n            return contents.getContent().stream()\r\n                    .map(Content -> {\r\n                        ContentResponseDto contentResponseDto = contentMapper.ContentToContentResponseDto(Content);\r\n                        contentResponseDto.setLiked(likeRepository.findByMemberAndContent(memberJpaRepository.findById(memberId).orElseThrow(), Content).isPresent());\r\n                        //contentResponseDto.setContentUri();\r\n                        return contentResponseDto;\r\n                    }).collect(Collectors.toList());\r\n        }\r\n\r\n    }\r\n\r\n    @Override\r\n    public List<Content> getLikes( Long memberId) {\r\n\r\n        Member member = memberJpaRepository.findById(memberId)\r\n                .orElseThrow(() -> new IllegalArgumentException(\"Member doesn't exist\"));\r\n\r\n        return member.getLikes().stream()\r\n                .map(Likes::getContent)\r\n                .collect(Collectors.toList());\r\n    }\r\n\r\n    @Override\r\n    public ResponseEntity<?> likeResponse(\r\n            HttpServletRequest request, int page, int size, String criteria, String sort){\r\n        Long memberId = (Long) request.getAttribute(\"memberId\");\r\n        if (memberId == null) {\r\n            return new ResponseEntity<>(\"로그인이 필요합니다.\", HttpStatus.FORBIDDEN);\r\n        }\r\n\r\n        Page<Content> contentsPage = contentPagination(getLikes(memberId), page-1, size, criteria, sort);\r\n\r\n        return new ResponseEntity<>(new ContentPageDto<>(contentsResponse(contentsPage, memberId), contentsPage), HttpStatus.OK);\r\n    }\r\n\r\n    @Override\r\n    public ResponseEntity<?> likeThemeResponse(\r\n            Long themeId, HttpServletRequest request, int page, int size, String criteria, String sort){\r\n        Long memberId = (Long) request.getAttribute(\"memberId\");\r\n        if (memberId == null) {\r\n            return new ResponseEntity<>(\"로그인이 필요합니다.\", HttpStatus.FORBIDDEN);\r\n        }\r\n\r\n        List<Content> contents = getLikes(memberId)\r\n                .stream().filter(content -> (content.getTheme().getThemeId()) == themeId)\r\n                .collect(Collectors.toList());\r\n        Page<Content> contentsPage = contentPagination(contents, page-1, size, criteria, sort);\r\n\r\n        return new ResponseEntity<>(new ContentPageDto<>(contentsResponse(contentsPage, memberId), contentsPage), HttpStatus.OK);\r\n    }\r\n\r\n\r\n    // Content url 조회 - 메타데이터 기반 - Pre signed-url 적용 - 만료시간 1분\r\n    public String getContentFileUrl(Long contentId){\r\n        // url\r\n        try{\r\n            String url = \"\";\r\n            String themeTitle = contentRepository.findById(contentId).orElseThrow().getTheme().getTitle();\r\n            ListObjectsRequest listObjectsRequest = ListObjectsRequest.builder()\r\n                    .bucket(bucketName)\r\n                    .prefix(\"pictures/\"+themeTitle+\"/\")\r\n                    .build();\r\n\r\n            ListObjectsResponse listObjectsResponse = s3Client.listObjects(listObjectsRequest);\r\n\r\n            for(S3Object s3Object : listObjectsResponse.contents()) {\r\n                HeadObjectRequest headObjectRequest = HeadObjectRequest.builder() // 메타데이터 객체 요청\r\n                        .bucket(bucketName)\r\n                        .key(s3Object.key())\r\n                        .build();\r\n\r\n                HeadObjectResponse headObjectResponse = s3Client.headObject(headObjectRequest);\r\n                Map<String, String> metadata = headObjectResponse.metadata();\r\n                String contentIdMetadata = metadata.get(\"contentid\");\r\n\r\n                // 메타데이터가 일치하는 값을 반환\r\n                if (contentIdMetadata != null && contentIdMetadata.equals(String.valueOf(contentId))) {\r\n                    GetObjectRequest getObjectRequest = GetObjectRequest.builder()\r\n                            .bucket(bucketName)\r\n                            .key(s3Object.key())\r\n                            .build();\r\n\r\n                    // pre-signed 객체 요청\r\n                    GetObjectPresignRequest getObjectPresignRequest = GetObjectPresignRequest.builder()\r\n                            .signatureDuration(Duration.ofMinutes(1)) // 만료시간\r\n                            .getObjectRequest(getObjectRequest)\r\n                            .build();\r\n\r\n                    PresignedGetObjectRequest presignedGetObjectRequest = s3Presigner.presignGetObject(getObjectPresignRequest);\r\n                    url = presignedGetObjectRequest.url().toString();\r\n                    break;\r\n                }\r\n            }\r\n            return url;\r\n        } catch (SdkException e){\r\n            throw new RuntimeException(\"URL 반환 실패: \" + e.getMessage(), e);\r\n        }\r\n    }\r\n\r\n    // 이미지 업로드 기능 - 관리자 권한필요 - 메타데이터 기반 업로드\r\n    public void upload(MultipartFile file, long contentId, String themeTitle, String fileName)  {\r\n        try {\r\n            PutObjectRequest putObjectRequest = PutObjectRequest.builder()\r\n                    .bucket(bucketName)\r\n                    .key(\"pictures/\"+themeTitle+\"/\"+fileName)\r\n                    .contentType(file.getContentType())\r\n                    .contentLength(file.getSize())\r\n                    .metadata(Collections.singletonMap(\"contentId\", String.valueOf(contentId)))\r\n                    .build();\r\n\r\n            s3Client.putObject(putObjectRequest, RequestBody.fromBytes(file.getBytes())); // 바이트 배열로 전달\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void thumbnailUpload(MultipartFile file, long contentId, String themeTitle, String fileName){\r\n        try {\r\n            PutObjectRequest putObjectRequest2 = PutObjectRequest.builder()\r\n                    .bucket(bucketName)\r\n                    .key(\"thumbnails/\"+themeTitle+\"/\"+fileName)\r\n                    .contentType(file.getContentType())\r\n                    .contentLength(file.getSize())\r\n                    .build();\r\n\r\n            s3Client.putObject(putObjectRequest2, RequestBody.fromBytes(file.getBytes()));\r\n        } catch (IOException e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public ResponseEntity<String> uploadSequence(MultipartFile file, String title, long themeId){\r\n        if (file.isEmpty()) {\r\n            return ResponseEntity.badRequest().body(\"파일이 존재하지 않습니다\");\r\n        }\r\n        try {\r\n            String fileName = file.getOriginalFilename();\r\n            String themeTitle = themeRepository.findById(themeId).orElseThrow().getTitle();\r\n            Content content = Content.builder()\r\n                    .theme(themeRepository.findById(themeId).orElseThrow())\r\n                    .title(title)\r\n                    .uri(\"http://\"+bucketName+\".s3.ap-northeast-2.amazonaws.com/thumbnails/\"+themeTitle+\"/\"+file.getOriginalFilename())\r\n                    .build();\r\n            contentRepository.save(content);\r\n            upload(file, content.getContentId(), themeTitle, fileName);\r\n            thumbnailUpload(file, content.getContentId(), themeTitle, fileName);\r\n\r\n            return ResponseEntity.ok(\"이미지가 성공적으로 업로드 되었습니다\");\r\n        } catch (Exception e) {\r\n            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(\"이미지 업로드 실패: {}\" + e.getMessage());\r\n        }\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/server/content/service/ContentServiceImpl.java b/src/main/java/com/example/server/content/service/ContentServiceImpl.java
--- a/src/main/java/com/example/server/content/service/ContentServiceImpl.java	(revision d478b7d59828e5500e7967fc64f52d75d1dc6b70)
+++ b/src/main/java/com/example/server/content/service/ContentServiceImpl.java	(date 1690378124282)
@@ -13,7 +13,12 @@
 import com.example.server.member.repository.MemberJpaRepository;
 import com.example.server.theme.entity.Theme;
 import com.example.server.theme.repository.ThemeRepository;
+import com.example.server.thumbnailExtractor.ThumbnailExtractor;
 import lombok.RequiredArgsConstructor;
+import net.coobird.thumbnailator.Thumbnailator;
+import org.apache.commons.fileupload.FileItem;
+import org.apache.tomcat.util.http.fileupload.IOUtils;
+import org.apache.tomcat.util.http.fileupload.disk.DiskFileItem;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 import org.springframework.beans.factory.annotation.Value;
@@ -21,7 +26,9 @@
 import org.springframework.http.HttpStatus;
 import org.springframework.http.ResponseEntity;
 import org.springframework.stereotype.Service;
+import org.springframework.transaction.annotation.Transactional;
 import org.springframework.web.multipart.MultipartFile;
+import org.springframework.web.multipart.commons.CommonsMultipartFile;
 import software.amazon.awssdk.core.exception.SdkException;
 import software.amazon.awssdk.core.sync.RequestBody;
 import software.amazon.awssdk.services.s3.S3Client;
@@ -30,14 +37,13 @@
 import software.amazon.awssdk.services.s3.presigner.model.GetObjectPresignRequest;
 import software.amazon.awssdk.services.s3.presigner.model.PresignedGetObjectRequest;
 
+import javax.imageio.ImageIO;
 import javax.servlet.http.HttpServletRequest;
-import javax.transaction.Transactional;
-import java.io.IOException;
+import java.awt.image.BufferedImage;
+import java.io.*;
+import java.nio.file.Files;
 import java.time.Duration;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
-import java.util.Map;
+import java.util.*;
 import java.util.stream.Collectors;
 
 @Transactional
@@ -53,10 +59,14 @@
     private final S3Presigner s3Presigner;
     //private static final Logger logger = (Logger) LoggerFactory.getLogger(ContentController.class);
 
+    private final ThumbnailExtractor thumbnailExtractor;
+
+
     @Value("${cloud.aws.s3.bucket}")
     private String bucketName;
 
     @Override
+    @Transactional(readOnly = true)
     public List<Content> getContentByTheme(Long themeId) {
         Theme theme = themeRepository.findById(themeId)
                 .orElseThrow(() -> new IllegalArgumentException("THEME doesn't exist"));
@@ -65,6 +75,7 @@
     }
 
     @Override
+    @Transactional(readOnly = true)
     public Page<Content> contentPagination(List<Content> contents, int page, int size, String criteria, String sort) {
         Pageable pageRequest = (sort.equals("ASC")) ?
                 PageRequest.of(page, size, Sort.by(Sort.Direction.ASC, criteria))
@@ -78,14 +89,15 @@
     }
 
     @Override
-    public ContentListDto contentResponse(Long contentId, HttpServletRequest request){
+    @Transactional(readOnly = true)
+    public ContentListDto contentResponse(Long contentId, HttpServletRequest request) {
         Content content = contentRepository.findById(contentId).orElseThrow();
         Long themeId = content.getTheme().getThemeId();
 
         ContentResponseDto contentResponseDto = contentMapper.ContentToContentResponseDto(content);
 
         Long memberId = (Long) request.getAttribute("memberId");
-        if (memberId == null){
+        if (memberId == null) {
             contentResponseDto.setLiked(false);
         } else {
             contentResponseDto.setLiked(likeRepository.findByMemberAndContent(memberJpaRepository.findById(memberId).orElseThrow(), content).isPresent());
@@ -101,7 +113,8 @@
     }
 
     @Override
-    public List<ContentResponseDto> contentsResponse(Page<Content> contents, Long memberId){
+    @Transactional(readOnly = true)
+    public List<ContentResponseDto> contentsResponse(Page<Content> contents, Long memberId) {
         if (memberId == null) {
             return contents.getContent().stream()
                     .map(Content -> {
@@ -123,7 +136,7 @@
     }
 
     @Override
-    public List<Content> getLikes( Long memberId) {
+    public List<Content> getLikes(Long memberId) {
 
         Member member = memberJpaRepository.findById(memberId)
                 .orElseThrow(() -> new IllegalArgumentException("Member doesn't exist"));
@@ -134,21 +147,23 @@
     }
 
     @Override
+    @Transactional(readOnly = true)
     public ResponseEntity<?> likeResponse(
-            HttpServletRequest request, int page, int size, String criteria, String sort){
+            HttpServletRequest request, int page, int size, String criteria, String sort) {
         Long memberId = (Long) request.getAttribute("memberId");
         if (memberId == null) {
             return new ResponseEntity<>("로그인이 필요합니다.", HttpStatus.FORBIDDEN);
         }
 
-        Page<Content> contentsPage = contentPagination(getLikes(memberId), page-1, size, criteria, sort);
+        Page<Content> contentsPage = contentPagination(getLikes(memberId), page - 1, size, criteria, sort);
 
         return new ResponseEntity<>(new ContentPageDto<>(contentsResponse(contentsPage, memberId), contentsPage), HttpStatus.OK);
     }
 
     @Override
+    @Transactional(readOnly = true)
     public ResponseEntity<?> likeThemeResponse(
-            Long themeId, HttpServletRequest request, int page, int size, String criteria, String sort){
+            Long themeId, HttpServletRequest request, int page, int size, String criteria, String sort) {
         Long memberId = (Long) request.getAttribute("memberId");
         if (memberId == null) {
             return new ResponseEntity<>("로그인이 필요합니다.", HttpStatus.FORBIDDEN);
@@ -157,26 +172,27 @@
         List<Content> contents = getLikes(memberId)
                 .stream().filter(content -> (content.getTheme().getThemeId()) == themeId)
                 .collect(Collectors.toList());
-        Page<Content> contentsPage = contentPagination(contents, page-1, size, criteria, sort);
+        Page<Content> contentsPage = contentPagination(contents, page - 1, size, criteria, sort);
 
         return new ResponseEntity<>(new ContentPageDto<>(contentsResponse(contentsPage, memberId), contentsPage), HttpStatus.OK);
     }
 
 
     // Content url 조회 - 메타데이터 기반 - Pre signed-url 적용 - 만료시간 1분
-    public String getContentFileUrl(Long contentId){
+    @Transactional(readOnly = true)
+    public String getContentFileUrl(Long contentId) {
         // url
-        try{
+        try {
             String url = "";
             String themeTitle = contentRepository.findById(contentId).orElseThrow().getTheme().getTitle();
             ListObjectsRequest listObjectsRequest = ListObjectsRequest.builder()
                     .bucket(bucketName)
-                    .prefix("pictures/"+themeTitle+"/")
+                    .prefix("pictures/" + themeTitle + "/")
                     .build();
 
             ListObjectsResponse listObjectsResponse = s3Client.listObjects(listObjectsRequest);
 
-            for(S3Object s3Object : listObjectsResponse.contents()) {
+            for (S3Object s3Object : listObjectsResponse.contents()) {
                 HeadObjectRequest headObjectRequest = HeadObjectRequest.builder() // 메타데이터 객체 요청
                         .bucket(bucketName)
                         .key(s3Object.key())
@@ -205,17 +221,18 @@
                 }
             }
             return url;
-        } catch (SdkException e){
+        } catch (SdkException e) {
             throw new RuntimeException("URL 반환 실패: " + e.getMessage(), e);
         }
     }
 
+    @Transactional
     // 이미지 업로드 기능 - 관리자 권한필요 - 메타데이터 기반 업로드
-    public void upload(MultipartFile file, long contentId, String themeTitle, String fileName)  {
+    public void upload(MultipartFile file, long contentId, String themeTitle, String fileName) {
         try {
             PutObjectRequest putObjectRequest = PutObjectRequest.builder()
                     .bucket(bucketName)
-                    .key("pictures/"+themeTitle+"/"+fileName)
+                    .key("pictures/" + themeTitle + "/" + fileName)
                     .contentType(file.getContentType())
                     .contentLength(file.getSize())
                     .metadata(Collections.singletonMap("contentId", String.valueOf(contentId)))
@@ -227,22 +244,27 @@
         }
     }
 
-    public void thumbnailUpload(MultipartFile file, long contentId, String themeTitle, String fileName){
+    @Transactional
+    public void thumbnailUpload(MultipartFile file, long contentId, String themeTitle, String fileName) {
         try {
             PutObjectRequest putObjectRequest2 = PutObjectRequest.builder()
                     .bucket(bucketName)
-                    .key("thumbnails/"+themeTitle+"/"+fileName)
+                    .key("thumbnails/" + themeTitle + "/" + fileName)
                     .contentType(file.getContentType())
                     .contentLength(file.getSize())
                     .build();
 
+            //File thumbfile = ThumbnailExtractor.extract(multipartFileToFile(file));
+
+
             s3Client.putObject(putObjectRequest2, RequestBody.fromBytes(file.getBytes()));
         } catch (IOException e) {
             e.printStackTrace();
         }
     }
 
-    public ResponseEntity<String> uploadSequence(MultipartFile file, String title, long themeId){
+    @Transactional
+    public ResponseEntity<String> uploadSequence(MultipartFile file, String title, long themeId) {
         if (file.isEmpty()) {
             return ResponseEntity.badRequest().body("파일이 존재하지 않습니다");
         }
@@ -252,7 +274,7 @@
             Content content = Content.builder()
                     .theme(themeRepository.findById(themeId).orElseThrow())
                     .title(title)
-                    .uri("http://"+bucketName+".s3.ap-northeast-2.amazonaws.com/thumbnails/"+themeTitle+"/"+file.getOriginalFilename())
+                    .uri("http://" + bucketName + ".s3.ap-northeast-2.amazonaws.com/thumbnails/" + themeTitle + "/" + file.getOriginalFilename())
                     .build();
             contentRepository.save(content);
             upload(file, content.getContentId(), themeTitle, fileName);
@@ -263,6 +285,22 @@
             return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("이미지 업로드 실패: {}" + e.getMessage());
         }
     }
+/*
+    public File multipartFileToFile(MultipartFile multipartFile) throws IOException {
+        File file = new File(Objects.requireNonNull(multipartFile.getOriginalFilename()));
+        multipartFile.transferTo(file);
+        return file;
+    }
+
+    public MultipartFile fileToMultipartFile(File file) throws  IOException {
+        DiskFileItem fileItem = new DiskFileItem("file", Files.probeContentType(file.toPath()), false, file.getName(), (int) file.length(), file.getParentFile());
 
+        InputStream input = new FileInputStream(file);
+        OutputStream os = fileItem.getOutputStream();
+        IOUtils.copy(input, os);
 
+        MultipartFile multipartFile = new CommonsMultipartFile((FileItem) fileItem);
+    }*/
 }
+
+
Index: src/main/java/com/example/server/thumbnailExtractor/ThumbnailExtractor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/server/thumbnailExtractor/ThumbnailExtractor.java b/src/main/java/com/example/server/thumbnailExtractor/ThumbnailExtractor.java
new file mode 100644
--- /dev/null	(date 1690378124286)
+++ b/src/main/java/com/example/server/thumbnailExtractor/ThumbnailExtractor.java	(date 1690378124286)
@@ -0,0 +1,42 @@
+package com.example.server.thumbnailExtractor;
+
+import io.jsonwebtoken.io.IOException;
+import lombok.extern.slf4j.Slf4j;
+import org.jcodec.api.FrameGrab;
+import org.jcodec.common.io.NIOUtils;
+import org.jcodec.common.model.Picture;
+import org.jcodec.scale.AWTUtil;
+import org.springframework.stereotype.Service;
+
+import javax.imageio.ImageIO;
+import java.awt.image.BufferedImage;
+import java.io.File;
+
+@Slf4j
+@Service
+public class ThumbnailExtractor {
+
+    private static final String EXTENSION = "jpg";
+
+    public static File extract(File source) throws IOException {
+        // 썸네일 파일 생성
+        File thumbnail = new File(source.getParent(), source.getName().split("\\.")[0] + "." + EXTENSION);
+
+        try {
+            FrameGrab frameGrab = FrameGrab.createFrameGrab(NIOUtils.readableChannel(source));
+
+            // 첫 프레임의 데이터
+            frameGrab.seekToSecondPrecise(0);
+
+            Picture picture = frameGrab.getNativeFrame();
+
+            // 썸네일 파일에 복사
+            BufferedImage bi = AWTUtil.toBufferedImage(picture);
+            ImageIO.write(bi, EXTENSION, thumbnail);
+
+        } catch (Exception e) {
+        }
+
+        return thumbnail;
+    }
+}
Index: src/main/java/com/example/server/content/controller/ContentController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.server.content.controller;\r\n\r\nimport com.example.server.content.dto.ContentListDto;\r\nimport com.example.server.content.dto.ContentPageDto;\r\nimport com.example.server.content.dto.ContentResponseDto;\r\nimport com.example.server.content.mapper.ContentMapper;\r\nimport com.example.server.content.repository.ContentRepository;\r\nimport com.example.server.content.service.ContentServiceImpl;\r\nimport io.swagger.v3.oas.annotations.Operation;\r\nimport io.swagger.v3.oas.annotations.responses.ApiResponse;\r\nimport io.swagger.v3.oas.annotations.responses.ApiResponses;\r\nimport io.swagger.v3.oas.annotations.tags.Tag;\r\nimport lombok.RequiredArgsConstructor;\r\nimport lombok.extern.slf4j.Slf4j;\r\nimport net.minidev.json.annotate.JsonIgnore;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.http.ResponseEntity;\r\nimport org.springframework.validation.annotation.Validated;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport javax.servlet.http.HttpServletRequest;\r\nimport javax.validation.constraints.Positive;\r\n\r\n@Tag(name = \"Contents\", description = \"API about Contents\")\r\n@RestController\r\n@RequiredArgsConstructor\r\n@RequestMapping(\"/contents\")\r\n@Validated\r\n@Slf4j\r\npublic class ContentController {\r\n    public final ContentMapper contentMapper;\r\n    public final ContentServiceImpl contentService;\r\n    public final ContentRepository contentRepository;\r\n\r\n    @Operation(summary = \"Content 세부 내용\",\r\n            description = \"Content ID를 받아서 해당 이미지와 좋아요 정보, 동일한 테마의 이미지 ID 리스트를 반환합니다. \\r \\n \\r\\n\" +\r\n                    \"로그인이 되어 있지 않은 경우 모든 좋아요 정보는 false로 반환됩니다. \\r \\n \\r\\n\" +\r\n                    \"해당 리스트의 Content 정보에서 제공하는 URI는 원본의 pre-signed URI입니다.\")\r\n\r\n    @ApiResponses(value = {\r\n            @ApiResponse(responseCode = \"200\", description = \"응답 성공\"),\r\n            @ApiResponse(responseCode = \"403\", description = \"토큰 불일치 혹은 만료\")\r\n    })\r\n    @GetMapping(\"/{content-id}\")\r\n    public ResponseEntity<ContentListDto> getContent(@Positive @PathVariable(\"content-id\") Long contentId,\r\n                                                     HttpServletRequest request){\r\n        return new ResponseEntity<>(contentService.contentResponse(contentId, request), HttpStatus.OK);\r\n    }\r\n\r\n    @JsonIgnore\r\n    @Operation(summary = \"Like 리스트 반환\",\r\n            description = \"사용자가 Like 표시한 Contents를 리스트의 형태로 Page 정보와 함께 반환합니다. \\r \\n \\r\\n\" +\r\n                    \"해당 리스트의 Content 정보에서 제공하는 URI는 thumbnail의 URI입니다.\")\r\n    @ApiResponses(value = {\r\n            @ApiResponse(responseCode = \"200\", description = \"응답 성공\"),\r\n            @ApiResponse(responseCode = \"403\", description = \"토큰 불일치 혹은 만료\")\r\n    })\r\n    @GetMapping(\"/likes\")\r\n    public ResponseEntity<?> getLikes(\r\n            HttpServletRequest request,\r\n            @Positive @RequestParam(required = false, defaultValue = \"1\", value = \"page\") int page,\r\n            @Positive @RequestParam(required = false, defaultValue = \"8\", value = \"size\") int size,\r\n            @RequestParam(required = false, defaultValue = \"contentId\", value = \"criteria\") String criteria,\r\n            @RequestParam(required = false, defaultValue = \"DESC\", value = \"sort\") String sort){\r\n\r\n        return contentService.likeResponse(request, page, size, criteria, sort);\r\n    }\r\n\r\n}\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/server/content/controller/ContentController.java b/src/main/java/com/example/server/content/controller/ContentController.java
--- a/src/main/java/com/example/server/content/controller/ContentController.java	(revision d478b7d59828e5500e7967fc64f52d75d1dc6b70)
+++ b/src/main/java/com/example/server/content/controller/ContentController.java	(date 1690378124281)
@@ -15,6 +15,7 @@
 import net.minidev.json.annotate.JsonIgnore;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.ResponseEntity;
+import org.springframework.transaction.annotation.Transactional;
 import org.springframework.validation.annotation.Validated;
 import org.springframework.web.bind.annotation.*;
 
@@ -27,14 +28,15 @@
 @RequestMapping("/contents")
 @Validated
 @Slf4j
+@Transactional
 public class ContentController {
     public final ContentMapper contentMapper;
     public final ContentServiceImpl contentService;
     public final ContentRepository contentRepository;
 
     @Operation(summary = "Content 세부 내용",
-            description = "Content ID를 받아서 해당 이미지와 좋아요 정보, 동일한 테마의 이미지 ID 리스트를 반환합니다. \r \n \r\n" +
-                    "로그인이 되어 있지 않은 경우 모든 좋아요 정보는 false로 반환됩니다. \r \n \r\n" +
+            description = "Content ID를 받아서 해당 이미지와 좋아요 정보, 동일한 테마의 이미지 ID 리스트를 반환합니다." +
+                    "로그인이 되어 있지 않은 경우 모든 좋아요 정보는 false로 반환됩니다." +
                     "해당 리스트의 Content 정보에서 제공하는 URI는 원본의 pre-signed URI입니다.")
 
     @ApiResponses(value = {
@@ -49,7 +51,7 @@
 
     @JsonIgnore
     @Operation(summary = "Like 리스트 반환",
-            description = "사용자가 Like 표시한 Contents를 리스트의 형태로 Page 정보와 함께 반환합니다. \r \n \r\n" +
+            description = "사용자가 Like 표시한 Contents를 리스트의 형태로 Page 정보와 함께 반환합니다." +
                     "해당 리스트의 Content 정보에서 제공하는 URI는 thumbnail의 URI입니다.")
     @ApiResponses(value = {
             @ApiResponse(responseCode = "200", description = "응답 성공"),
@@ -65,7 +67,24 @@
 
         return contentService.likeResponse(request, page, size, criteria, sort);
     }
+    @Operation(summary = "테마 별 Like 리스트 반환",
+            description = "사용자가 Like 표시한, Theme ID에 해당하는 Contents를 리스트의 형태로 Page 정보와 함께 반환합니다. \r \n \r\n" +
+                    "해당 리스트의 Content 정보에서 제공하는 URI는 thumbnail의 URI입니다.")
+    @ApiResponses(value = {
+            @ApiResponse(responseCode = "200", description = "응답 성공"),
+            @ApiResponse(responseCode = "403", description = "토큰 불일치 혹은 만료")
+    })
+    @GetMapping("/likes/{theme-id}")
+    public ResponseEntity<?> getLikesTheme(
+            @Positive @PathVariable("theme-id") Long themeId,
+            HttpServletRequest request,
+            @Positive @RequestParam(required = false, defaultValue = "1", value = "page") int page,
+            @Positive @RequestParam(required = false, defaultValue = "8", value = "size") int size,
+            @RequestParam(required = false, defaultValue = "contentId", value = "criteria") String criteria,
+            @RequestParam(required = false, defaultValue = "DESC", value = "sort") String sort){
 
+        return contentService.likeThemeResponse(themeId, request, page, size, criteria, sort);
+    }
 }
 
 
Index: src/main/java/com/example/server/member/config/WebMvcConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.server.member.config;\r\n\r\nimport com.example.server.member.interceptor.HttpInterceptor;\r\nimport com.example.server.member.security.token.JwtTokenProvider;\r\nimport com.example.server.member.service.TokenService;\r\nimport lombok.RequiredArgsConstructor;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.web.servlet.config.annotation.CorsRegistry;\r\nimport org.springframework.web.servlet.config.annotation.InterceptorRegistry;\r\nimport org.springframework.web.servlet.config.annotation.WebMvcConfigurer;\r\n\r\n@RequiredArgsConstructor\r\n@Configuration\r\npublic class WebMvcConfig implements WebMvcConfigurer {\r\n    private final JwtTokenProvider tokenProvider;\r\n    @Override\r\n    public void addInterceptors(InterceptorRegistry registry) {\r\n        registry.addInterceptor(new HttpInterceptor(tokenProvider))\r\n                .addPathPatterns(\"/tokens/**\")\r\n                .addPathPatterns(\"/members/**\")\r\n                .addPathPatterns(\"/contents/**\")\r\n                .addPathPatterns(\"/likes/**\")\r\n                .addPathPatterns(\"/theme/**\")\r\n                .addPathPatterns(\"/contentsUpload\")\r\n                .excludePathPatterns(\"/css/**\", \"/images/**\", \"/js/**\");\r\n    }\r\n\r\n    @Override\r\n    public void addCorsMappings(CorsRegistry registry){\r\n        registry.addMapping(\"/**\")\r\n                .allowedOrigins(\"http://localhost:3000\")\r\n                .allowedOrigins(\"http://localhost:3030\") // local content test\r\n                .allowedMethods(\"*\")\r\n                .allowedHeaders(\"*\")\r\n                .exposedHeaders(\"Access-Control-Allow-Origin\");\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/server/member/config/WebMvcConfig.java b/src/main/java/com/example/server/member/config/WebMvcConfig.java
--- a/src/main/java/com/example/server/member/config/WebMvcConfig.java	(revision d478b7d59828e5500e7967fc64f52d75d1dc6b70)
+++ b/src/main/java/com/example/server/member/config/WebMvcConfig.java	(date 1690378124284)
@@ -30,6 +30,7 @@
         registry.addMapping("/**")
                 .allowedOrigins("http://localhost:3000")
                 .allowedOrigins("http://localhost:3030") // local content test
+                .allowedOrigins("http://cozystates.com")
                 .allowedMethods("*")
                 .allowedHeaders("*")
                 .exposedHeaders("Access-Control-Allow-Origin");
Index: build/generated/sources/annotationProcessor/java/main/com/example/server/theme/mapper/ThemeMapperImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.server.theme.mapper;\r\n\r\nimport javax.annotation.processing.Generated;\r\nimport org.springframework.stereotype.Component;\r\n\r\n@Generated(\r\n    value = \"org.mapstruct.ap.MappingProcessor\",\r\n    date = \"2023-07-24T11:22:08+0900\",\r\n    comments = \"version: 1.5.3.Final, compiler: IncrementalProcessingEnvironment from gradle-language-java-8.1.1.jar, environment: Java 11.0.18 (Amazon.com Inc.)\"\r\n)\r\n@Component\r\npublic class ThemeMapperImpl implements ThemeMapper {\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/build/generated/sources/annotationProcessor/java/main/com/example/server/theme/mapper/ThemeMapperImpl.java b/build/generated/sources/annotationProcessor/java/main/com/example/server/theme/mapper/ThemeMapperImpl.java
--- a/build/generated/sources/annotationProcessor/java/main/com/example/server/theme/mapper/ThemeMapperImpl.java	(revision d478b7d59828e5500e7967fc64f52d75d1dc6b70)
+++ b/build/generated/sources/annotationProcessor/java/main/com/example/server/theme/mapper/ThemeMapperImpl.java	(date 1690378233423)
@@ -5,7 +5,7 @@
 
 @Generated(
     value = "org.mapstruct.ap.MappingProcessor",
-    date = "2023-07-24T11:22:08+0900",
+    date = "2023-07-26T22:30:33+0900",
     comments = "version: 1.5.3.Final, compiler: IncrementalProcessingEnvironment from gradle-language-java-8.1.1.jar, environment: Java 11.0.18 (Amazon.com Inc.)"
 )
 @Component
